
import logging
import traceback
import asyncio
import time
from src.utils.bedrock import bedrock_info
from src.utils.common_utils import retry
from strands import Agent, tool
from strands.models import BedrockModel
from botocore.config import Config
from botocore.exceptions import ClientError
from langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler
from strands.types.exceptions import EventLoopException

from datetime import datetime

from strands.agent.agent_result import AgentResult
from strands.types.content import ContentBlock, Message
from strands.multiagent.base import MultiAgentBase, NodeResult, MultiAgentResult, Status

# Simple logger setup
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class Colors:
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

class ColoredStreamingCallback(StreamingStdOutCallbackHandler):
    COLORS = {
        'blue': '\033[94m',
        'green': '\033[92m',
        'yellow': '\033[93m',
        'red': '\033[91m',
        'purple': '\033[95m',
        'cyan': '\033[96m',
        'white': '\033[97m',
    }

    def __init__(self, color='blue'):
        super().__init__()
        self.color_code = self.COLORS.get(color, '\033[94m')
        self.reset_code = '\033[0m'

    def on_llm_new_token(self, token: str, **kwargs) -> None:
        print(f"{self.color_code}{token}{self.reset_code}", end="", flush=True)

class strands_utils():

    @staticmethod
    def get_model(**kwargs):

        llm_type = kwargs["llm_type"]
        cache_type = kwargs["cache_type"]
        enable_reasoning = kwargs["enable_reasoning"]

        if llm_type == "claude-sonnet-3-7":    
            ## BedrockModel params: https://strandsagents.com/latest/api-reference/models/?h=bedrockmodel#strands.models.bedrock.BedrockModel
            llm = BedrockModel(
                model_id=bedrock_info.get_model_id(model_name="Claude-V3-7-Sonnet-CRI"),
                streaming=True,
                max_tokens=8192*5,
                stop_sequences=["\n\nHuman"],
                temperature=1 if enable_reasoning else 0.01, 
                additional_request_fields={
                    "thinking": {
                        "type": "enabled" if enable_reasoning else "disabled", 
                        **({"budget_tokens": 8192} if enable_reasoning else {}),
                    }
                },
                cache_prompt=cache_type, # None/ephemeral/defalut
                #cache_tools: Cache point type for tools
                boto_client_config=Config(
                    read_timeout=900,
                    connect_timeout=900,
                    retries=dict(max_attempts=50, mode="adaptive"),
                )
            )   
        elif llm_type == "claude-sonnet-3-5-v-2":
            ## BedrockModel params: https://strandsagents.com/latest/api-reference/models/?h=bedrockmodel#strands.models.bedrock.BedrockModel
            llm = BedrockModel(
                model_id=bedrock_info.get_model_id(model_name="Claude-V3-5-V-2-Sonnet-CRI"),
                streaming=True,
                max_tokens=8192,
                stop_sequences=["\n\nHuman"],
                temperature=0.01,
                cache_prompt=cache_type, # None/ephemeral/defalut
                #cache_tools: Cache point type for tools
                boto_client_config=Config(
                    read_timeout=900,
                    connect_timeout=900,
                    retries=dict(max_attempts=50, mode="standard"),
                )
            )
        else:
            raise ValueError(f"Unknown LLM type: {llm_type}")

        return llm

    @staticmethod
    def get_agent(**kwargs):

        agent_name, system_prompts = kwargs["agent_name"], kwargs["system_prompts"]
        agent_type = kwargs.get("agent_type", "claude-sonnet-3-7")
        enable_reasoning = kwargs.get("enable_reasoning", False)
        prompt_cache_info = kwargs.get("prompt_cache_info", (False, None)) # (True, "default")
        tools = kwargs.get("tools", None)
        streaming = kwargs.get("streaming", True)

        prompt_cache, cache_type = prompt_cache_info
        if prompt_cache: logger.info(f"{Colors.GREEN}{agent_name.upper()} - Prompt Cache Enabled{Colors.END}")
        else: logger.info(f"{Colors.GREEN}{agent_name.upper()} - Prompt Cache Disabled{Colors.END}")

        llm = strands_utils.get_model(llm_type=agent_type, cache_type=cache_type, enable_reasoning=enable_reasoning)
        llm.config["streaming"] = streaming

        agent = Agent(
            model=llm,
            system_prompt=system_prompts,
            tools=tools,
            callback_handler=None # async iterator로 대체 하기 때문에 None 설정
        )

        return agent

    @staticmethod
    def get_agent_state(agent, key, default_value=None):
      """Strands Agent의 state에서 안전하게 값을 가져오는 메서드"""
      value = agent.state.get(key)
      if value is None: return default_value
      return value

    @staticmethod
    def get_agent_state_all(agent):
        return agent.state.get()

    @staticmethod
    def update_agent_state(agent, key, value):
        agent.state.set(key, value)
        #return agent

    @staticmethod
    def update_agent_state_all(target_agent, source_agent):
        """다른 에이전트의 state를 현재 에이전트에 복사"""
        source_state = source_agent.state.get()
        if source_state:
            for key, value in source_state.items():
                target_agent.state.set(key, value)
        return target_agent

    @staticmethod
    async def process_streaming_response(agent, message):
        callback_reasoning, callback_answer = ColoredStreamingCallback('purple'), ColoredStreamingCallback('white')
        response = {"text": "","reasoning": "", "signature": "", "tool_use": None, "cycle": 0}
        try:
            agent_stream = agent.stream_async(message)
            async for event in agent_stream:
                if "reasoningText" in event:
                    response["reasoning"] += event["reasoningText"]
                    callback_reasoning.on_llm_new_token(event["reasoningText"])
                elif "reasoning_signature" in event:
                    response["signature"] += event["reasoning_signature"]
                elif "data" in event:
                    response["text"] += event["data"]
                    callback_answer.on_llm_new_token(event["data"])
                elif "current_tool_use" in event and event["current_tool_use"].get("name"):
                    response["tool_use"] = event["current_tool_use"]["name"]
                    if "event_loop_metrics" in event:
                        if response["cycle"] != event["event_loop_metrics"].cycle_count:
                            response["cycle"] = event["event_loop_metrics"].cycle_count
                            callback_answer.on_llm_new_token(f' \n## Calling tool: {event["current_tool_use"]["name"]} - # Cycle: {event["event_loop_metrics"].cycle_count}\n')
        except Exception as e:
            logger.error(f"Error in streaming response: {e}")
            logger.error(traceback.format_exc())  # Detailed error logging

        return agent, response

    # ========================================
    # OLD IMPLEMENTATION (Backup)
    # Date: Before 2025-10-09
    # Purpose: Simple agent stream processing without keep-alive
    # To rollback: Uncomment this entire function and comment out NEW implementation below
    # ========================================
    # @staticmethod
    # async def process_streaming_response_yield(agent, message, agent_name="coordinator", source=None):
    #     from src.utils.event_queue import put_event
    #
    #     # Retry configuration
    #     max_attempts = 5
    #     base_delay = 30  # seconds
    #
    #     for attempt in range(max_attempts):
    #         try:
    #             session_id = "ABC"
    #             agent_stream = agent.stream_async(message)
    #
    #             async for event in agent_stream:
    #                 # Strands 이벤트를 AgentCore 형식으로 변환
    #                 agentcore_event = await strands_utils._convert_to_agentcore_event(event, agent_name, session_id, source)
    #                 if agentcore_event:
    #                     # Put event in global queue for unified processing
    #                     put_event(agentcore_event)
    #                     yield agentcore_event
    #
    #             # If we get here, streaming was successful
    #             break
    #
    #         except (EventLoopException, ClientError) as e:
    #             # Check if it's a throttling error
    #             is_throttling = False
    #             if isinstance(e, EventLoopException):
    #                 # Check if the underlying error is throttling
    #                 error_msg = str(e).lower()
    #                 is_throttling = 'throttling' in error_msg or 'too many requests' in error_msg
    #             elif isinstance(e, ClientError):
    #                 error_code = e.response.get('Error', {}).get('Code', '')
    #                 is_throttling = error_code == 'ThrottlingException'
    #
    #             if is_throttling and attempt < max_attempts - 1:
    #                 delay = base_delay * (2 ** attempt)  # Exponential backoff
    #                 next_attempt = attempt + 2  # Next attempt number (attempt is 0-indexed)
    #                 logger.warning(f"🔄 Throttling detected - Retry Step {attempt + 1}/{max_attempts}")
    #                 logger.warning(f"⏱️  Waiting {delay} seconds before Step {next_attempt} retry...")
    #                 await asyncio.sleep(delay)
    #                 logger.info(f"🚀 Starting retry attempt {next_attempt}/{max_attempts}")
    #                 continue
    #             else:
    #                 logger.error(f"Error in streaming response (attempt {attempt + 1}/{max_attempts}): {e}")
    #                 logger.error(traceback.format_exc())
    #                 if attempt == max_attempts - 1:
    #                     raise  # Re-raise on final attempt
    #         except Exception as e:
    #             logger.error(f"Unexpected error in streaming response: {e}")
    #             logger.error(traceback.format_exc())
    #             raise

    # ========================================
    # NEW IMPLEMENTATION (Current)
    # Date: 2025-10-09
    # Updated: 2025-10-09 (30s keep-alive to prevent socket.send() warnings)
    # Purpose: Prevent HTTP/2 SSE timeout during long-running LLM operations (Reporter Agent 82-326s)
    # Mechanism: asyncio.Queue + _merge_streams to yield keep-alive events to client every 30s
    # To rollback: Comment out this entire function and uncomment OLD implementation above
    # ========================================
    @staticmethod
    async def process_streaming_response_yield(agent, message, agent_name="coordinator", source=None):
        from src.utils.event_queue import put_event

        # Keep-alive tracking
        last_event_time = {"value": time.time()}
        streaming_active = {"value": True}
        keepalive_count = {"value": 0}
        keepalive_queue = asyncio.Queue()

        # Background keep-alive task
        async def keepalive_task():
            """Emit status messages every 30 seconds during LLM processing"""
            keepalive_interval = 30  # seconds (reduced from 60s to prevent socket.send() warnings)
            last_keepalive_time = {"value": time.time()}  # Track last keep-alive emission

            while streaming_active["value"]:
                await asyncio.sleep(5)  # Check every 5 seconds

                current_time = time.time()
                elapsed_since_last_event = current_time - last_event_time["value"]
                elapsed_since_last_keepalive = current_time - last_keepalive_time["value"]

                # Send keep-alive if:
                # 1. More than 30s since last agent event
                # 2. More than 30s since last keep-alive (prevent spamming)
                if (elapsed_since_last_event >= keepalive_interval and
                    elapsed_since_last_keepalive >= keepalive_interval and
                    streaming_active["value"]):

                    keepalive_count["value"] += 1
                    elapsed_int = int(elapsed_since_last_event)

                    # Create keep-alive event
                    keepalive_event = {
                        "type": "keep_alive",
                        "event_type": "status_message",
                        "agent_name": agent_name,
                        "message": f"Processing long-running LLM operation ({elapsed_int}s)",
                        "elapsed_seconds": elapsed_int,
                        "timestamp": time.strftime("%H:%M:%S"),
                        "count": keepalive_count["value"]
                    }

                    # Put in queue - will be consumed by merge_streams
                    await keepalive_queue.put(keepalive_event)

                    # Log to CloudWatch for monitoring
                    logger.info(f"💓 [{agent_name.upper()}] Keep-Alive #{keepalive_count['value']}: {elapsed_int}s elapsed (interval: 30s)")

                    # Update last keep-alive time to prevent spamming
                    last_keepalive_time["value"] = current_time

        # Start background keep-alive task
        keepalive_bg = asyncio.create_task(keepalive_task())

        # Retry configuration
        max_attempts = 5
        base_delay = 30  # seconds

        try:
            for attempt in range(max_attempts):
                try:
                    session_id = "ABC"
                    agent_stream = agent.stream_async(message)

                    # Merge agent stream and keep-alive queue
                    async for event in strands_utils._merge_streams(
                        agent_stream,
                        keepalive_queue,
                        last_event_time,
                        streaming_active,
                        agent_name,
                        session_id,
                        source
                    ):
                        # Event is already converted to agentcore format by _merge_streams
                        if event:
                            put_event(event)
                            yield event

                    # If we get here, streaming was successful
                    break

                except (EventLoopException, ClientError) as e:
                    # Check if it's a throttling error
                    is_throttling = False
                    if isinstance(e, EventLoopException):
                        # Check if the underlying error is throttling
                        error_msg = str(e).lower()
                        is_throttling = 'throttling' in error_msg or 'too many requests' in error_msg
                    elif isinstance(e, ClientError):
                        error_code = e.response.get('Error', {}).get('Code', '')
                        is_throttling = error_code == 'ThrottlingException'

                    if is_throttling and attempt < max_attempts - 1:
                        delay = base_delay * (2 ** attempt)  # Exponential backoff
                        next_attempt = attempt + 2  # Next attempt number (attempt is 0-indexed)
                        logger.warning(f"🔄 Throttling detected - Retry Step {attempt + 1}/{max_attempts}")
                        logger.warning(f"⏱️  Waiting {delay} seconds before Step {next_attempt} retry...")
                        await asyncio.sleep(delay)
                        logger.info(f"🚀 Starting retry attempt {next_attempt}/{max_attempts}")
                        continue
                    else:
                        logger.error(f"Error in streaming response (attempt {attempt + 1}/{max_attempts}): {e}")
                        logger.error(traceback.format_exc())
                        if attempt == max_attempts - 1:
                            raise  # Re-raise on final attempt
                except Exception as e:
                    logger.error(f"Unexpected error in streaming response: {e}")
                    logger.error(traceback.format_exc())
                    raise

        finally:
            # Stop background keep-alive task
            streaming_active["value"] = False
            keepalive_bg.cancel()
            try:
                await keepalive_bg
            except asyncio.CancelledError:
                pass  # Expected when cancelling

    # ========================================
    # NEW HELPER FUNCTION: Stream Merging
    # Date: 2025-10-09
    # Purpose: Merge agent stream and keep-alive queue into single output stream
    # NOTE: This function is ONLY used by NEW implementation above
    # To rollback: Delete this entire function (Lines ~360-430)
    # ========================================
    @staticmethod
    async def _merge_streams(agent_stream, keepalive_queue, last_event_time, streaming_active, agent_name, session_id, source):
        """Agent 이벤트와 keep-alive 이벤트를 병합하여 yield

        이 함수는 두 개의 비동기 소스를 병합합니다:
        1. agent_stream: LLM의 실제 응답 이벤트
        2. keepalive_queue: 백그라운드 태스크에서 생성한 keep-alive 이벤트

        핵심 메커니즘:
        - asyncio.wait()로 두 소스를 동시에 모니터링
        - 먼저 도착하는 이벤트를 즉시 yield
        - Agent 이벤트 수신 시 last_event_time 업데이트 → keep-alive 타이머 리셋
        - Keep-alive 이벤트를 그대로 yield → 클라이언트 HTTP 연결 유지

        왜 이 방법이 필요한가?
        - Nested async function은 parent generator의 yield 사용 불가
        - logger.info()는 CloudWatch에만 기록되고 SSE 스트림에 전달 안 됨
        - asyncio.Queue를 통해 background task → main generator로 이벤트 전달
        """
        graph_iterator = agent_stream.__aiter__()
        graph_finished = {"value": False}
        pending_graph_task = None
        pending_keepalive_task = None

        while streaming_active["value"] or not keepalive_queue.empty():
            tasks = []

            # Agent 이벤트 태스크 (pending이거나 새로 생성) - 🐛 FIX: pending task도 추가!
            if not graph_finished["value"]:
                if pending_graph_task is None:
                    pending_graph_task = asyncio.create_task(graph_iterator.__anext__())
                tasks.append(pending_graph_task)  # ← BUG FIX: Always add to tasks list!

            # Keep-alive 이벤트 태스크 (pending이거나 새로 생성) - 🐛 FIX: pending task도 추가!
            if not keepalive_queue.empty():
                if pending_keepalive_task is None:
                    pending_keepalive_task = asyncio.create_task(keepalive_queue.get())
                tasks.append(pending_keepalive_task)  # ← BUG FIX: Always add to tasks list!

            if not tasks:
                # 모든 이벤트 처리 완료
                if graph_finished["value"]:
                    break
                # 아직 agent stream이 완료되지 않았으면 잠시 대기
                await asyncio.sleep(0.1)
                continue

            # 첫 번째로 완료되는 태스크를 기다림
            done, pending = await asyncio.wait(
                tasks,
                return_when=asyncio.FIRST_COMPLETED,
                timeout=1.0
            )

            # 완료된 태스크 처리
            for task in done:
                if task == pending_graph_task:
                    try:
                        strands_event = task.result()

                        # 이벤트 시간 업데이트 (keep-alive 타이머 리셋)
                        last_event_time["value"] = time.time()

                        # Strands 이벤트를 AgentCore 형식으로 변환
                        agentcore_event = await strands_utils._convert_to_agentcore_event(
                            strands_event, agent_name, session_id, source
                        )
                        if agentcore_event:
                            yield agentcore_event

                        pending_graph_task = None
                    except StopAsyncIteration:
                        # Agent stream 완료
                        graph_finished["value"] = True
                        streaming_active["value"] = False
                        pending_graph_task = None
                    except Exception as e:
                        logger.error(f"Error processing agent event: {e}")
                        logger.error(traceback.format_exc())
                        pending_graph_task = None

                elif task == pending_keepalive_task:
                    try:
                        keepalive_event = task.result()

                        # ✅ Keep-alive도 last_event_time 업데이트 → elapsed 리셋
                        # 이것이 "152s elapsed" 문제의 핵심 해결책!
                        # Keep-Alive를 "의미 있는 activity"로 간주하여 timeout 방지
                        last_event_time["value"] = time.time()

                        # Keep-alive 이벤트를 그대로 yield (이미 agentcore 형식)
                        yield keepalive_event
                        pending_keepalive_task = None
                    except Exception as e:
                        logger.error(f"Error processing keep-alive event: {e}")
                        logger.error(traceback.format_exc())
                        pending_keepalive_task = None

    # 툴 사용 ID와 툴 이름 매핑을 위한 클래스 변수
    _tool_use_mapping = {}

    @staticmethod
    async def _convert_to_agentcore_event(strands_event, agent_name, session_id, source=None):
        """Strands 이벤트를 AgentCore 스트리밍 형식으로 변환"""

        base_event = {
            "timestamp": datetime.now().isoformat(),
            "session_id": session_id,
            "agent_name": agent_name,
            "source": source or f"{agent_name}_node",
        }

        # 텍스트 데이터 이벤트
        if "data" in strands_event:
            return {
                **base_event,
                "type": "agent_text_stream",
                "event_type": "text_chunk",
                "data": strands_event["data"],
                "chunk_size": len(strands_event["data"])
            }

        # 도구 사용 이벤트
        elif "current_tool_use" in strands_event:
            tool_info = strands_event["current_tool_use"]
            tool_id = tool_info.get("toolUseId")
            tool_name = tool_info.get("name", "unknown")

            # toolUseId와 tool_name 매핑 저장
            if tool_id and tool_name: strands_utils._tool_use_mapping[tool_id] = tool_name

            return {
                **base_event,
                "type": "agent_tool_stream",
                "event_type": "tool_use",
                "tool_name": tool_name,
                "tool_id": tool_id,
                "tool_input": tool_info.get("input", {})
            }

        # message 래퍼 안의 tool result 처리
        if "message" in strands_event:
            message = strands_event["message"]
            if isinstance(message, dict) and "content" in message and isinstance(message["content"], list):
                for content_item in message["content"]:
                    if isinstance(content_item, dict) and "toolResult" in content_item:
                        tool_result = content_item["toolResult"]
                        tool_id = tool_result.get("toolUseId")

                        # 저장된 매핑에서 툴 이름 찾기
                        tool_name = strands_utils._tool_use_mapping.get(tool_id, "external_tool")
                        output = str(tool_result.get("content", [{}])[0].get("text", "")) if tool_result.get("content") else ""

                        return {
                            **base_event,
                            "type": "agent_tool_stream",
                            "event_type": "tool_result", 
                            "tool_name": tool_name,
                            "tool_id": tool_id,
                            "output": output
                        }

        # 추론 이벤트
        elif "reasoning" in strands_event and strands_event.get("reasoning"):
            return {
                **base_event,
                "type": "agent_reasoning_stream",
                "event_type": "reasoning",
                "reasoning_text": strands_event.get("reasoningText", "")[:200]
            }

        return None

    @staticmethod
    def parsing_text_from_response(response):

        """
        Usage (async iterator x): 
        agent = Agent()
        response = agent(query)
        response = strands_utils.parsing_text_from_response(response)
        """

        output = {}
        if len(response.message["content"]) == 2: ## reasoning
            output["reasoning"] = response.message["content"][0]["reasoningContent"]["reasoningText"]["text"]
            output["signature"] = response.message["content"][0]["reasoningContent"]["reasoningText"]["signature"]

        output["text"] = response.message["content"][-1]["text"]

        return output  

    #########################
    ## modification STRART ##
    #########################

    @staticmethod
    def process_event_for_display(event):
        """Process events for colored terminal output"""
        # Initialize colored callbacks for terminal display
        callback_default = ColoredStreamingCallback('white')
        callback_reasoning = ColoredStreamingCallback('cyan')
        callback_tool = ColoredStreamingCallback('yellow')
        callback_keepalive = ColoredStreamingCallback('green')

        if event:
            if event.get("event_type") == "text_chunk":
                callback_default.on_llm_new_token(event.get('data', ''))

            elif event.get("event_type") == "reasoning":
                callback_reasoning.on_llm_new_token(event.get('reasoning_text', ''))

            elif event.get("event_type") == "tool_use":
                pass

            elif event.get("event_type") == "tool_result":
                tool_name = event.get("tool_name", "unknown")
                output = event.get("output", "")
                print(f"\n[TOOL RESULT - {tool_name}]", flush=True)

                # Parse output based on function name
                if tool_name == "python_repl_tool" and len(output.split("||")) == 3:
                    status, code, stdout = output.split("||")
                    callback_tool.on_llm_new_token(f"Status: {status}\n")

                    if code: callback_tool.on_llm_new_token(f"Code:\n```python\n{code}\n```\n")
                    if stdout and stdout != 'None': callback_tool.on_llm_new_token(f"Output:\n{stdout}\n")

                elif tool_name == "bash_tool" and len(output.split("||")) == 2:
                    cmd, stdout = output.split("||")
                    if cmd: callback_tool.on_llm_new_token(f"CMD:\n```bash\n{cmd}\n```\n")
                    if stdout and stdout != 'None': callback_tool.on_llm_new_token(f"Output:\n{stdout}\n")

                elif tool_name == "file_read":
                    # file_read 결과는 보통 길어서 앞부분만 표시
                    truncated_output = output[:500] + "..." if len(output) > 500 else output
                    callback_tool.on_llm_new_token(f"File content preview:\n{truncated_output}\n")

                else: # 기타 모든 툴 결과 표시, 코더 툴, 리포터 툴 결과도 다 출력 (for debug)
                    callback_tool.on_llm_new_token(f"Output: pass - you can see that in debug mode\n")
                    # callback_default.on_llm_new_token(f"Output: {output}\n")
                    #pass

            # ========================================
            # NEW CASE: Keep-Alive Status Messages
            # Date: 2025-10-09
            # Purpose: Display keep-alive events to user in green color
            # To rollback: Delete this entire elif block (Lines ~607-614)
            #              Also delete Line ~553: callback_keepalive = ColoredStreamingCallback('green')
            # ========================================
            elif event.get("event_type") == "status_message":
                # Keep-alive 메시지 표시 (녹색)
                agent_name = event.get("agent_name", "unknown").upper()
                elapsed = event.get("elapsed_seconds", 0)
                count = event.get("count", 0)
                callback_keepalive.on_llm_new_token(f"\n💓 [{agent_name}] Keep-Alive #{count}: {elapsed}s elapsed...\n")

    #########################
    ## modification END    ##
    #########################

class FunctionNode(MultiAgentBase):
    """Execute deterministic Python functions as graph nodes."""

    def __init__(self, func, name: str = None):
        super().__init__()
        self.func = func
        self.name = name or func.__name__

    def __call__(self, task=None, **kwargs):
        """Synchronous execution for compatibility with MultiAgentBase"""
        # Pass task and kwargs directly to function
        if asyncio.iscoroutinefunction(self.func): 
            return asyncio.run(self.func(task=task, **kwargs))
        else: 
            return self.func(task=task, **kwargs)

    # Execute function and return standard MultiAgentResult
    async def invoke_async(self, task=None, invocation_state=None, **kwargs):
        # Execute function (nodes now use global state for data sharing)  
        # Pass task and kwargs directly to function
        if asyncio.iscoroutinefunction(self.func): 
            response = await self.func(task=task, **kwargs)
        else: 
            response = self.func(task=task, **kwargs)

        agent_result = AgentResult(
            stop_reason="end_turn",
            message=Message(role="assistant", content=[ContentBlock(text=str(response["text"]))]),
            metrics={},
            state={}
        )

        # Return wrapped in MultiAgentResult
        return MultiAgentResult(
            status=Status.COMPLETED,
            results={self.name: NodeResult(result=agent_result)}
        )




